/*
 * Copyright (C) Photon Vision.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

// THIS FILE WAS AUTO-GENERATED BY ./photon-targeting/generate_messages.py. DO NOT MODIFY

#include "photon/dataflow/structures/Packet.h"

{% for include in cpp_includes -%}
#include {{ include }}
{% endfor %}

struct {{ name }}_PhotonStruct {
  {% for field in fields -%}
  {%- if field.optional == True -%}
  std::optional<
  {%- elif field.vla == True -%}
  std::vector<
  {%- endif -%}
  {%- if field.type | is_shimmed -%}
  {{ get_message_by_name(field.type).cpp_type }}
  {%- else -%}
  {{ type_map[field.type].cpp_type }}
  {%- endif -%}
  {%- if (field.optional == True or field.vla == True) -%}
  > 
  {%- endif %} {{field.name}};
  {%- if not loop.last %}
  {% endif -%}
{% endfor %}
};


template <>
struct WPILIB_DLLEXPORT photon::Struct<photon::{{ name }}> {
  static constexpr std::string_view GetSchemaHash() {
    return "{{ message_hash }}";
  }

  static constexpr std::string_view GetSchema() {
    return "{{ message_str | tojson | replace('"','\\"') }}";
  }

  static photon::{{ name }} Unpack(photon::Packet& packet);
  static void Pack(photon::Packet& packet, const photon::{{ name }}& value);
};

static_assert(photon::PhotonStructSerializable<photon::{{ name }}>);
