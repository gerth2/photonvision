/*
 * Copyright (C) Photon Vision.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "photon/struct/{{ name }}Serde.h"

// TODO: include headers from other messages for template resolution

// For namespacing dependant structserializable types
using namespace photon;

using StructType = ::photon::Struct<{{ name }}>;

void StructType::Pack(Packet& packet, const {{ name }}& value) {
{%- for field in fields -%}
    {%- if field.type | is_shimmed -%}
    packet.Pack<{{ get_message_by_name(field.type).cpp_type }}>(value.{{ field.name }});
    {%- else -%}
    packet.Pack<{{ type_map[field.type].cpp_type }}>(value.{{ field.name }});
    {%- endif -%}
    {%- if not loop.last %}
    {% endif -%}
{% endfor %}
}

{{ name }} StructType::Unpack(Packet& packet) {
    {{ name }} ret;

    {% for field in fields -%}
    {%- if field.type | is_shimmed -%}
    ret.{{ field.name}} = packet.Unpack<{{ get_message_by_name(field.type).cpp_type }}>();
    {%- else -%}
    ret.{{ field.name}} = packet.Unpack<{{ type_map[field.type].cpp_type }}>();
    {%- endif -%}
    {%- if not loop.last %}
    {% endif -%}
{% endfor %}

    return ret;
}
