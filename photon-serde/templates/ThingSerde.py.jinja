from photonlibpy.packet import Packet

from photonlibpy import *

class {{ name }}Serde:

    # Message definition md5sum. See photon_packet.adoc for details
    MESSAGE_VERSION = "{{ message_hash }}"
    MESSAGE_FORMAT = "{{ message_fmt }}"

    @staticmethod
    def unpack(packet: Packet) -> Packet:
        ret = {{ name }}()
{% for field in fields -%}
    {%- if field.type | is_shimmed %}
        # field is shimmed!
        ret.{{ field.name }} = {{ get_message_by_name(field.type).python_decode_shim }}()
    {%- elif field.optional == True %}
        # {{ field.name }} is optional! it better not be a VLA too
        ret.{{ field.name }} = packet.decodeOptional({{ field.type }}.photonStruct)
    {%- elif field.vla == True and not field.type | is_intrinsic %}
        # {{ field.name }} is a custom VLA!
        ret.{{ field.name }} = packet.decodeList({{ field.type }}.photonStruct)
    {%- elif field.vla == True and field.type | is_intrinsic %}
        # {{ field.name }} is a custom VLA!
        ret.{{ field.name }} = packet.decode{{ type_map[field.type].java_type.title() }}List()
    {%- elif field.type | is_intrinsic %}
        # {{ field.name }} is of intrinsic type {{ field.type }}
        ret.{{field.name}} = packet.{{ type_map[field.type].java_decode_method }}()
    {%- else %}
        # {{ field.name }} is of non-intrinsic type {{ field.type }}
        ret.{{field.name}} = {{ field.type }}.photonStruct.unpack(packet)
    {%- endif %}
    {%- if not loop.last %}
    {% endif -%}
{% endfor%}

        return ret
